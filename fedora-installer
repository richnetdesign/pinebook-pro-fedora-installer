#! /bin/bash

# *****************************
#       Version 3.0
# *****************************

# Change download url and raw filename to your liking
FEDORAURL=${1:-"https://download.fedoraproject.org/pub/fedora/linux/releases/32/Container/aarch64/images/Fedora-Container-Base-32-1.6.aarch64.tar.xz"}
FEDORARAW=$(echo $FEDORAURL | grep -Po '[^\/]+$')

# Set globals
TMPDIR=/var/tmp/fedora-installer
ARCH='aarch64'
CARCH=$(uname -m)
NSPAWN='systemd-nspawn -q --resolv-conf=copy-host --timezone=off -D'

# set colorscheme
export DIALOGRC="./dialogrc_gui"

# clearing variables
DEVICE="Pinebook Pro"
EDITION="Fedora Workstation"
USER=""
USERGROUPS=""
FULLNAME=""
PASSWORD=""
CONFIRMPASSWORD=""
CONFIRMROOTPASSWORD=""
ROOTPASSWORD=""
SDCARD=""
SDTYP=""
SDDEV=""
DEV_NAME=""
TIMEZONE=""
LOCALE=""
HOSTNAME=""

# check if root
if [ "$EUID" -ne 0 ]; then
    echo "*******************************************************************************************"
    echo "*                                                                                         *"
    echo "*     This script requires root permissions to run. Please run as root or with sudo!      *"
    echo "*                                                                                         *"
    echo "*******************************************************************************************"
  exit
fi

# Sanity checks for dependencies
declare -a DEPENDNECIES=("sed" "rsync" "git" "fdisk" "systemd-nspawn" "wget" "dialog" "bsdtar" "openssl" "awk" "mkfs.vfat")

for i in "${DEPENDNECIES[@]}"; do
  if ! [[ -f "/bin/$i" || -f "/sbin/$i" || -f "/usr/bin/$i" || -f "/usr/sbin/$i" ]] ; then
    echo "$i command is missing! Please install the relevant package."
    exit 1
  fi
done

if [[ "$CARCH" != "aarch64" ]]; then
if ! [[ -f "/usr/lib/binfmt.d/qemu-aarch64-static.conf" || -f "/usr/lib/binfmt.d/qemu-static.conf" ]]; then
    echo "qemu-aarch64-static.conf file is missing. Please install the relevant package."
    exit 1
fi
fi


# Functions
msg() {
    ALL_OFF="\e[1;0m"
    BOLD="\e[1;1m"
    GREEN="${BOLD}\e[1;32m"
      local mesg=$1; shift
      printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
 }

info() {
    ALL_OFF="\e[1;0m"
    BOLD="\e[1;1m"
    BLUE="${BOLD}\e[1;34m"
      local mesg=$1; shift
      printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
 }

usage_build_installer() {
    echo "Usage: ${0##*/} [options]"
    echo '    -h                 This help'
    echo ''
    echo ''
    exit $1
}

get_timer(){
    echo $(date +%s)
}

# $1: start timer
elapsed_time(){
    echo $(echo $1 $(get_timer) | awk '{ printf "%0.2f",($2-$1)/60 }')
}

show_elapsed_time(){
    msg "Time %s: %s minutes..." "$1" "$(elapsed_time $2)"
}

getarmprofiles () {
    info "Getting profiles ready for Pinebook Pro install..."

    mkdir -p $TMPDIR/fedora-profiles 1> /dev/null 2>&1
    cp -rf ./overlays $TMPDIR/fedora-profiles/

}

prepare_media() {
    msg "Prepare source media..."
    
    # fetch and extract rootfs
    info "Downloading latest $ARCH rootfs..."
    cd $TMPDIR
    rm -rf $TMPDIR/Manjaro-ARM-$ARCH-latest.tar.gz 1> /dev/null 2>&1
    wget -q --show-progress --progress=bar:force:noscroll https://osdn.net/projects/manjaro-arm/storage/.rootfs/Manjaro-ARM-$ARCH-latest.tar.gz

    if [ ! -f "$FEDORARAW" ]; then
    info "Downloading Fedora Image..."
      wget -q --show-progress --progress=bar:force:noscroll $FEDORAURL
    fi

    info "Extracting Manjaro rootfs..."
    mkdir -p $TMPDIR/manjaro 1> /dev/null 2>&1
    bsdtar -xpf $TMPDIR/Manjaro-ARM-$ARCH-latest.tar.gz -C $TMPDIR/manjaro
    rm -rf $TMPDIR/Manjaro-ARM-$ARCH-latest.tar.gz 1> /dev/null 2>&1

    info "Extracting Fedora rootfs..."
    mkdir -p $TMPDIR/fedora 1> /dev/null 2>&1
    bsdtar -xpf $TMPDIR/$FEDORARAW --strip-components=1 -C $TMPDIR/fedora
    bsdtar -xpf $TMPDIR/fedora/layer.tar -C $TMPDIR/fedora
    rm -f $TMPDIR/fedora/layer.tar 1> /dev/null 2>&1
    rm -f $TMPDIR/fedora/json 1> /dev/null 2>&1
    rm -f $TMPDIR/fedora/VERSION 1> /dev/null 2>&1
    rm -rf $TMPDIR/$FEDORARAW 1> /dev/null 2>&1
    
}

manjaro_install() {
    msg "Prepare kernel..."
    
    info "Setting up keyrings..."
    $NSPAWN $TMPDIR/manjaro pacman-key --init 1> /dev/null 2>&1
    $NSPAWN $TMPDIR/manjaro pacman-key --populate archlinux archlinuxarm manjaro manjaro-arm 1> /dev/null 2>&1
    
    info "Generating mirrorlist..."
    $NSPAWN $TMPDIR/manjaro pacman-mirrors -f10 1> /dev/null 2>&1
    
    info "Installing packages..."
    # Install device and editions specific packages
    $NSPAWN $TMPDIR/manjaro pacman -Syyu sed bootsplash-theme-manjaro bootsplash-systemd linux uboot-pinebookpro ap6256-firmware wpa_supplicant pinebookpro-audio xf86-input-synaptics pinebookpro-post-install --noconfirm

}    

install_fedora() {
    msg "Install Fedora..."
    info "Install type is Fedora Workstation..."
    $NSPAWN $TMPDIR/fedora dnf install fedora-release-workstation --allowerasing -y
    info "Upgrade base install..."
    $NSPAWN $TMPDIR/fedora dnf upgrade -y --refresh
    info "Install Fedora Workstation..."
    $NSPAWN $TMPDIR/fedora dnf group install "Fedora Workstation" -y

    info "Install extra packages..."
    $NSPAWN $TMPDIR/fedora dnf install -y haveged acpid

    info "Enable services from extra packages..."
    $NSPAWN $TMPDIR/fedora systemctl enable haveged.service
    $NSPAWN $TMPDIR/fedora systemctl enable acpid.service
    $NSPAWN $TMPDIR/fedora systemctl set-default graphical.target

    info "Clear dnf cache..."
    $NSPAWN $TMPDIR/fedora dnf clean all 1> /dev/null 2>&1

    info "copy kernel..."
    rsync -a $TMPDIR/manjaro/boot/ $TMPDIR/fedora/boot/
    rsync -a $TMPDIR/manjaro/usr/lib/firmware/ $TMPDIR/fedora/usr/lib/firmware/
    rsync -a $TMPDIR/manjaro/usr/lib/modules/ $TMPDIR/fedora/usr/lib/modules/
    rm -rf $TMPDIR/manjaro
}
	
configure_fedora() {
    msg "Configure Fedora..."
    info "Turning SELinux off (no support in kernel)..."
    sed -i 's/SELINUX=enforcing/SELINUX=disabled/' $TMPDIR/fedora/etc/selinux/config

    info "Update extlinux.conf and fstab with UUID..."
    # Get UUID
    EFIUUID=$(blkid -s UUID -o value "${SDCARD}${SDDEV}4")
    BOOTUUID=$(blkid -s UUID -o value "${SDCARD}${SDDEV}5")
    ROOTUUID=$(blkid -s UUID -o value "${SDCARD}${SDDEV}6")
    # Edit extlinux.conf
    sed -i -e "s!APPEND.*!APPEND initrd=/initramfs-linux.img console=tty1 console=ttyS2,1500000 root=UUID=${ROOTUUID} rw rootwait video=eDP-1:1920x1080@60 video=HDMI-A-1:1920x1080@60!g" ${TMPDIR}/fedora/boot/extlinux/extlinux.conf
    # Edit fstab
    echo "UUID=${ROOTUUID}  /   ext4    defaults        0       1"  > $TMPDIR/fedora/etc/fstab
    echo "UUID=${BOOTUUID}  /boot   ext4    defaults        0       2" >> $TMPDIR/fedora/etc/fstab
    echo "UUID=${EFIUUID}  /boot/efi   vfat    defaults        0       2"  >> $TMPDIR/fedora/etc/fstab
    
    info "Set timezone..."
    $NSPAWN $TMPDIR/fedora ln -sf /usr/share/zoneinfo/"$TIMEZONE" /etc/localtime 1> /dev/null 2>&1
    
    info "Set locale..."
    echo "LANG=$LOCALE" | tee --append $TMPDIR/fedora/etc/locale.conf 1> /dev/null 2>&1
    
    info "Set keymap..."
    echo "KEYMAP=$CLIKEYMAP" | tee --append $TMPDIR/fedora/etc/vconsole.conf 1> /dev/null 2>&1
    echo 'Section "InputClass"' > $TMPDIR/fedora/etc/X11/xorg.conf.d/00-keyboard.conf
    echo 'Identifier "system-keyboard"' >> $TMPDIR/fedora/etc/X11/xorg.conf.d/00-keyboard.conf
    echo 'Option "XkbLayout" "us"' >> $TMPDIR/fedora/etc/X11/xorg.conf.d/00-keyboard.conf
    echo 'EndSection' >> $TMPDIR/fedora/etc/X11/xorg.conf.d/00-keyboard.conf
    sed -i s/"us"/"$X11KEYMAP"/ $TMPDIR/fedora/etc/X11/xorg.conf.d/00-keyboard.conf

    info "Set hostname..."
    echo "$HOSTNAME" > $TMPDIR/fedora/etc/hostname
	
    info "Applying overlay for Fedora Workstation..."
    cp -ap $TMPDIR/fedora-profiles/overlays/* $TMPDIR/fedora/
    
    # Correcting permissions from overlay
    
    info "Enable suspend2idle..."
    sed -i s/"#SuspendState=mem standby freeze"/"SuspendState=freeze"/g $TMPDIR/fedora/etc/systemd/sleep.conf

    info "Fix update-uboot for pinebook-pro-rk3399"
    ln -s ../socs.d/Rockchips-ARMv8 $TMPDIR/fedora/usr/share/arm-image-installer/boards.d/pinebook-pro-rk3399

    info "Setting up users..."
    #setup users
    echo "$USER" > $TMPDIR/user
    echo "$PASSWORD" > $TMPDIR/password
    echo "$ROOTPASSWORD" > $TMPDIR/rootpassword

    info "Setting password for root ..."
    $NSPAWN $TMPDIR/fedora awk -i inplace -F: "BEGIN {OFS=FS;} \$1 == \"root\" {\$2=\"$(openssl passwd -1 $(cat $TMPDIR/rootpassword))\"} 1" /etc/shadow 1> /dev/null 2>&1

    info "Adding user..."
    $NSPAWN $TMPDIR/fedora useradd -m -G wheel -p $(openssl passwd -1 $(cat $TMPDIR/password)) -s /bin/bash $(cat $TMPDIR/user) 1> /dev/null 2>&1
    $NSPAWN $TMPDIR/fedora usermod -aG $USERGROUPS $(cat $TMPDIR/user) 1> /dev/null 2>&1
    $NSPAWN $TMPDIR/fedora chfn -f "$FULLNAME" $(cat $TMPDIR/user) 1> /dev/null 2>&1
	
    # Remove temp files on host
    rm -rf $TMPDIR/user $TMPDIR/password $TMPDIR/rootpassword

    msg "$DEVICE $EDITION install complete"
}

build_from_template () {
	sed \
		-e "s/\${DEV_NAME}/`basename ${DEV_NAME}`/g" \
		< $1.template > $1
}

partition_card () {
    msg "Getting $SDCARD ready for $DEVICE..."
    # umount SD card
    umount ${SDCARD}$* 1> /dev/null 2>&1

    info "Create partitions on $DEV_NAME..."
    #Clear first 32mb
    dd if=/dev/zero of=${SDCARD} bs=1M count=32 1> /dev/null 2>&1

    #partition with efi, boot and root
    echo -e "label:gpt\nunit:sectors\nfirst-lba:64" | sfdisk ${SDCARD} 1> /dev/null 2>&1
    echo -e "n\n1\n64\n+16319\nn\n2\n16384\n+8191\nn\n3\n24576\n+8191\nn\n4\n32768\n+512\nn\n5\n\n+1G\nn\n6\n\n\nt\n1\n27\nt\n2\n27\nt\n3\n27\nt\n4\n1\nx\nR\n1\nR\n2\nR\n3\nA\n4\nr\nw" | fdisk ${SDCARD} 1> /dev/null 2>&1

}

format_card () {

    info "Format partitions on $DEV_NAME"
        mkfs.vfat -F 32 "${SDCARD}${SDDEV}4" -n EFI 1> /dev/null 2>&1
        mkfs.ext4 -F -O ^metadata_csum,^64bit "${SDCARD}${SDDEV}5" -L "${DEV_NAME}-boot" 1> /dev/null 2>&1
        mkfs.ext4 -F -O ^metadata_csum,^64bit "${SDCARD}${SDDEV}6" -L "${DEV_NAME}-root" 1> /dev/null 2>&1

        mkdir -p $TMPDIR/fedora
        mount ${SDCARD}${SDDEV}4 $TMPDIR/fedora
        sleep 1
        mkdir -p $TMPDIR/fedora/boot
        mount ${SDCARD}${SDDEV}5 $TMPDIR/fedora/boot
        sleep 1
        mkdir -p $TMPDIR/fedora/boot/efi
        mount ${SDCARD}${SDDEV}6 $TMPDIR/fedora/boot/efi

}

cleanup () {
    msg "Writing bootloader and cleaning up after install..."
    # Flash bootloader
    dd if=$TMPDIR/fedora/boot/idbloader.img of=${SDCARD}${SDDEV}1 bs=4096 1> /dev/null 2>&1
    dd if=$TMPDIR/fedora/boot/u-boot.itb of=${SDCARD}${SDDEV}2 bs=4096 1> /dev/null 2>&1
    	
    #clean up
        umount $TMPDIR/fedora/boot/efi
        umount $TMPDIR/fedora/boot
        umount $TMPDIR/fedora
	partprobe $SDCARD 1> /dev/null 2>&1
	rm -rf $TMPDIR
}

if [ ! -z "$EDITION" ]; then
	USER=$(dialog --clear --title "Fedora ARM Installer" \
	--inputbox "Enter the username you want:
(usernames most be all lowercase)" 8 50 \
	3>&1 1>&2 2>&3 3>&-)
    if [[ "$USER" =~ [A-Z] ]] || [[ "$USER" == *['!'@#\$%^\&*()_+]* ]]; then
    clear
    msg "Configuration aborted! Username contained invalid characters."
    exit 1
    fi
else 
	clear
	exit 1
fi

if [ ! -z "$USER" ]
then
FULLNAME=$(dialog --clear --title "Fedora ARM Installer" \
    --inputbox "Enter desired Full Name for $USER:" 8 50 \
        3>&1 1>&2 2>&3 3>&- \
	)
else
    clear
    exit 1
fi

if [ ! -z "$FULLNAME" ]; then
	PASSWORD=$(dialog --clear --title "Fedora ARM Installer" \
	--insecure --passwordbox "Enter new Password for $USER:" 8 50 \
	3>&1 1>&2 2>&3 3>&- \
	)
else 
	clear
	exit 1
fi

if [ ! -z "$PASSWORD" ]; then
	CONFIRMPASSWORD=$(dialog --clear --title "Fedora ARM Installer" \
	--insecure --passwordbox "Confirm new Password for $USER:" 8 50 \
	3>&1 1>&2 2>&3 3>&- \
	)
else 
	clear
	exit 1
fi

if [[ "$PASSWORD" != "$CONFIRMPASSWORD" ]]; then
	clear
	msg "User passwords do not match! Please restart the installer and try again."
	exit 1
fi

if [ ! -z "$CONFIRMPASSWORD" ]; then
	ROOTPASSWORD=$(dialog --clear --title "Fedora ARM Installer" \
	--insecure --passwordbox "Enter new Root Password:" 8 50 \
	3>&1 1>&2 2>&3 3>&- \
	)
else 
	clear
	exit 1
fi

if [ ! -z "$ROOTPASSWORD" ]; then
	CONFIRMROOTPASSWORD=$(dialog --clear --title "Fedora ARM Installer" \
	--insecure --passwordbox "Confirm new Root Password:" 8 50 \
	3>&1 1>&2 2>&3 3>&- \
	)
else 
	clear
	exit 1
fi

if [[ "$ROOTPASSWORD" != "$CONFIRMROOTPASSWORD" ]]; then
	clear
	msg "Root passwords do not match! Please restart the installer and try again."
	exit 1
fi

if [ ! -z "$CONFIRMROOTPASSWORD" ]
then

# simple command to put the results of lsblk (just the names of the devices) into an array and make that array populate the options	
	let i=0
	W=()
	while read -r line; do
		let i=$i+1
		W+=($line "")
	done < <( lsblk -dn -o NAME )
	SDCARD=$(dialog --title "Fedora ARM Installer" \
	--menu "Choose your SDCard/eMMC/USB - Be sure the correct drive is selected! 
WARNING! This WILL destroy the data on it!" 20 50 10 \
	"${W[@]}" 3>&2 2>&1 1>&3)

# add /dev/ to the selected option above
	DEV_NAME=$SDCARD
	SDCARD=/dev/$SDCARD
	SDTYP=${SDCARD:5:2}
else 
	clear
	exit 1
fi

if [[ "$SDTYP" = "sd" ]]; then
	SDDEV=""
elif [[ "$SDTYP" = "mm" ]]; then
	SDDEV="p"
else 
	clear
	exit 1
fi


if [ ! -z "$SDCARD" ]; then
	let i=0
	W=()
	while read -r line; do
		let i=$i+1
		W+=($line "")
	done < <( timedatectl list-timezones )
	TIMEZONE=$(dialog --clear --title "Fedora ARM Installer" \
	--menu "Choose your timezone!" 20 50 15 \
	"${W[@]}" 3>&1 1>&2 2>&3 3>&- \
	)
else 
	clear
	exit 1
fi


if [ ! -z "$TIMEZONE" ]; then
	let i=0
	W=()
	while read -r line; do
		let i=$i+1
		W+=($line "")
	done < <( localectl list-locales )
	LOCALE=$(dialog --clear --title "Fedora ARM Installer" \
		--menu "Choose your locale!" 20 50 15 \
		"${W[@]}" 3>&1 1>&2 2>&3 3>&- \
		)
else 
	clear
	exit 1
fi

if [ ! -z "$LOCALE" ]; then
	let i=0
	W=()
	while read -r line; do
		let i=$i+1
		W+=($line "")
	done < <( localectl list-keymaps )
	CLIKEYMAP=$(dialog --clear --title "Fedora ARM Installer" \
		--menu "Choose your TTY keyboard layout:" 20 50 15 \
		"${W[@]}" 3>&1 1>&2 2>&3 3>&- \
	)
else 
	clear
	exit 1
fi

if [ ! -z "$CLIKEYMAP" ]; then
	let i=0
	W=()
	while read -r line; do
		let i=$i+1
		W+=($line "")
	done < <( localectl list-x11-keymap-layouts )
	X11KEYMAP=$(dialog --clear --title "Manjaro ARM Installer" \
		--menu "Choose your X11 keyboard layout:" 20 50 15 \
		"${W[@]}" 3>&1 1>&2 2>&3 3>&- \
	)
else 
	clear
	exit 1
fi

if [ ! -z "$CLIKEYMAP" ]; then
	HOSTNAME=$(dialog --clear --title "Fedora ARM Installer" \
	--inputbox "Enter desired hostname (fqdn) for this system:" 8 50 \
	3>&1 1>&2 2>&3 3>&- \
	)
else 
	clear
	exit 1
fi

if [ ! -z "$HOSTNAME" ]; then
	dialog --clear --title "Fedora ARM Installer" \
    --yesno "Is the below information correct:
    Device = $DEVICE
    Edition = $EDITION
    Username = $USER
    Additional usergroups = $USERGROUPS
    Password for $USER = (password hidden)
    Password for root = (password hidden)
    SDCard/eMMC/USB = $SDCARD
    Timezone = $TIMEZONE
    Locale = $LOCALE
    Keyboard layout = $CLIKEYMAP
    Hostname = $HOSTNAME" 20 70 \
    3>&1 1>&2 2>&3 3>&-
else
	clear
	exit 1
fi

response=$?
case $response in
   0) clear; msg "Installation started....";;
   1) clear; msg "Installation aborted...."; exit 1;;
   255) clear; msg "Installation aborted..."; exit 1;;
esac

# get the profiles
getarmprofiles

# Commands
timer_start=$(get_timer)

partition_card
format_card
prepare_media
manjaro_install
install_fedora
configure_fedora
cleanup
show_elapsed_time "${FUNCNAME}" "${timer_start}"
sync
